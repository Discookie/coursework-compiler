descriptors:
    fn0: Fn(main, ())
    fn1: Fn(write, (bool))
    fn2: Fn(write, (int))
    fn3: Fn(read_bool, ())
    fn4: Fn(read_int, ())
    fn5: Fn(some_fn, (int, int, int))

functions:

fn0: fn(0 args) -> none {
locals:
    _0: none
    _1: int
    _2: int
    _3: int
    _4: int

bb0:
    _1 = 2
    _2 = 3
    call _3 <- fn4(), bb1

bb1:
    call _4 <- fn5(_1, _2, _3), bb2

bb2:
    call fn2(_4), bb3

bb3:
    ret

}

fn1: fn(1 args) -> none {
locals:
    _0: none
    _1: bool

}

fn2: fn(1 args) -> none {
locals:
    _0: none
    _1: int

}

fn3: fn(0 args) -> bool {
locals:
    _0: bool

}

fn4: fn(0 args) -> int {
locals:
    _0: int

}

fn5: fn(3 args) -> int {
locals:
    _0: int
    _1: int
    _2: int
    _3: int
    _4: int
    _5: int
    _6: int
    _7: bool
    _8: int
    _9: bool
    _10: bool
    _11: int
    _12: int
    _13: int
    _14: int
    _15: int
    _16: int
    _17: int
    _18: int
    _19: int
    _20: int
    _21: int
    _22: int
    _23: bool
    _24: int
    _25: int
    _26: int

bb0:
    _4 = 2
    _5 = _2 
+ _3
    _6 = 20
    _7 = _5 > _6
    _8 = 5
    _9 = _1 < _8
    _10 = _9 && _7
    if _10, bb1, bb5

bb1:
    goto bb2

bb2:
    _20 <- phi(_4, _19)
    _21 <- phi(_1, _12)
    _22 = 0
    _23 = _21 > _22
    if _23, bb3, bb4

bb3:
    _11 = 1
    _12 = _21 - _11
    _13 = _12 * _12
    _14 = _3 * _13
    _15 = _2 * _12
    _16 = 3
    _17 = _15 + _16
    _18 = _14 + _17
    _19 = _20 + _18
    goto bb2

bb4:
    goto bb5

bb5:
    _24 <- phi(_21, _1)
    _25 <- phi(_20, _4)
    _26 = _24 + _25
    _0 = _26
    ret

}

