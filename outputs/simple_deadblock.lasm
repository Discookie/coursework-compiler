descriptors:
    fn0: Fn(main, ())
    fn1: Fn(write, (bool))
    fn2: Fn(write, (int))
    fn3: Fn(read_bool, ())
    fn4: Fn(read_int, ())
    fn5: Fn(some_fn, (int, int, int))

functions:

fn0: fn(0 args) -> none {
locals:
    _0: none
    _1: int
    _2: int
    _3: int
    _4: int

bb0:
    _1 = 2
    _2 = 3
    call _3 <- fn4(), bb1

bb1:
    call _4 <- fn5(_1, _2, _3), bb2

bb2:
    call fn2(_4), bb3

bb3:
    ret

}

fn1: fn(1 args) -> none {
locals:
    _0: none
    _1: bool

}

fn2: fn(1 args) -> none {
locals:
    _0: none
    _1: int

}

fn3: fn(0 args) -> bool {
locals:
    _0: bool

}

fn4: fn(0 args) -> int {
locals:
    _0: int

}

fn5: fn(3 args) -> int {
locals:
    _0: int
    _1: int
    _2: int
    _3: int
    _4: int
    _5: int
    _6: int
    _7: int
    _8: int
    _9: bool
    _10: int
    _11: bool
    _12: bool
    _13: int
    _14: int
    _15: int
    _16: int
    _17: int
    _18: int
    _19: int
    _20: int
    _21: int
    _22: int
    _23: int
    _24: int
    _25: bool
    _26: int
    _27: int
    _28: int

bb0:
    _4 = 2
    _5 = _2 + _3
    _9 = _5 > 20
    _11 = _1 < 5
    _12 = _11 && _9
    if _12, bb1, bb3

bb1:
    _22 <- phi(_1, _14)    [bb0, bb2]
    _23 <- phi(_4, _21)    [bb0, bb2]
    _25 = _22 > 0
    if _25, bb2, bb3

bb2:
    _14 = _22 - 1
    _15 = _14 * _14
    _16 = _3 * _15
    _17 = _2 * _14
    _19 = _17 + 3
    _20 = _16 + _19
    _21 = _23 + _20
    goto bb1

bb3:
    _26 <- phi(_22, _1)    [bb1, bb0]
    _27 <- phi(_23, _4)    [bb1, bb0]
    _28 = _26 + _27
    _0 = _28
    ret

}

